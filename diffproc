--- proc.c	2021-05-16 11:00:12.390087470 -0700
+++ proc.p3	2021-05-16 11:17:05.523208060 -0700
@@ -38,10 +38,6 @@
 #ifdef CS333_P3
   struct ptrs list[statecount];
 #endif //CS333_P3
-#ifdef CS333_P4
-  struct ptrs ready[MAXPRIO+1];
-  uint PromoteAtTime;
-#endif //CS333_P4
 } ptable;
 
 // list management function prototypes
@@ -179,10 +175,6 @@
     p->gid = 0;
   }
 #endif //CS333_P2
-#ifdef CS333_P4
-  p->priority = MAXPRIO;
-  p->budget = DEFAULT_BUDGET;
-#endif
   p->cpu_ticks_total = 0; //Initialize value to 0- update in sched()
   p->cpu_ticks_in = 0;  //Initialize value to 0- update in scheduler()
 
@@ -265,9 +257,6 @@
   acquire(&ptable.lock);
   initProcessLists();
   initFreeList();
-#ifdef CS333_P4
-  ptable.PromoteAtTime = ticks + TICKS_TO_PROMOTE;
-#endif //CS333_P4
   release(&ptable.lock);
   struct proc *p;
   extern char _binary_initcode_start[], _binary_initcode_size[];
@@ -303,13 +292,7 @@
   }
   assertState(p, EMBRYO, __FUNCTION__, __LINE__);
   p->state = RUNNABLE;
-#ifdef CS333_P4
-  p->budget = DEFAULT_BUDGET;
-  p->priority = MAXPRIO - 1;
-  stateListAdd(&ptable.ready[p->priority], p);
-#else
   stateListAdd(&ptable.list[RUNNABLE], p);
-#endif
   release(&ptable.lock);
 }
 #endif //CS333_P3 version userinit()
@@ -427,13 +410,7 @@
   }
   assertState(np, EMBRYO, __FUNCTION__, __LINE__);
   np->state = RUNNABLE;
-#ifdef CS333_P4
-  np->budget = DEFAULT_BUDGET;
-  np->priority = MAXPRIO - 1;
-  stateListAdd(&ptable.ready[np->priority], np);
-#else
   stateListAdd(&ptable.list[RUNNABLE], np);
-#endif //CS333_P4
   release(&ptable.lock);
 
   return pid;
@@ -534,19 +511,6 @@
       p = p->next;
     }
   }
-
-#ifdef CS333_P4
-for(int i = 0; i <= MAXPRIO; ++i){
-  p = ptable.ready[i].head;
-  while(p){
-    if(p->parent == curproc){
-      p->parent = initproc;
-    }
-    p = p->next;
-  }
-}
-#endif
-
   // Jump into the scheduler, never to return.
   if(stateListRemove(&ptable.list[RUNNING], curproc) == -1){
     panic("Unable to end process!\n");
@@ -654,17 +618,6 @@
       p = p->next;
       }
     }
-#ifdef CS333_P4
-    for(int i = 0; i <= MAXPRIO; ++i){
-      p = ptable.ready[i].head;
-      while(p){
-        if(p->parent == curproc){
-          havekids = 1;
-        }
-        p = p->next;
-      }
-    }
-#endif //CS333_P4
 
     // No point waiting if we don't have any children.
     if(!havekids || curproc->killed){
@@ -722,73 +675,6 @@
 }
 #endif //CS333_P2 version wait()
 
-#ifdef CS333_P4
-void
-scheduler(void)
-{
-  struct proc *p;
-  struct cpu *c = mycpu();
-  c->proc = 0;
-#ifdef PDX_XV6
-  int idle;  // for checking if processor is idle
-#endif // PDX_XV6
-
-  for(;;){
-    // Enable interrupts on this processor.
-    sti();
-
-#ifdef PDX_XV6
-    idle = 1;  // assume idle unless we schedule a process
-#endif // PDX_XV6
-    // Loop over process table looking for process to run.
-    acquire(&ptable.lock); //Trigger for panic on CPU0
-    
-    int i = MAXPRIO; //Counter for while loop- iterate through priorities while !p
-    do{ //Loop through each priority list- stop when either p or ctr drops below 0
-      p = ptable.ready[i].head;
-      --i;
-    }while(!p && i >= 0);
-    
-      // Switch to chosen process.  It is the process's job
-      // to release ptable.lock and then reacquire it
-      // before jumping back to us.
-#ifdef PDX_XV6
-    if(p){
-        idle = 0;  // not idle this timeslice
-        ++i; //Increment i back to the priority that p was pulled from
-#endif // PDX_XV6
-        c->proc = p;
-        switchuvm(p);
-        if(stateListRemove(&ptable.ready[i], p) == -1){
-          panic("Unable to start process!\n");
-        }
-        assertState(p, RUNNABLE, __FUNCTION__, __LINE__);
-        p->state = RUNNING;
-        stateListAdd(&ptable.list[RUNNING], p);
-#ifdef CS333_P2
-        p->cpu_ticks_in = ticks;
-#endif //CS333_P2
-        swtch(&(c->scheduler), p->context);
-        switchkvm();
-
-      // Process is done running for now.
-      // It should have changed its p->state before coming back.
-        c->proc = 0;
-    } 
-    release(&ptable.lock);
-#ifdef PDX_XV6
-    // if idle, wait for next interrupt
-    if (idle) {
-      sti();
-      hlt();
-    }
-#endif // PDX_XV6
- } 
-}
-#endif //CS333_P4 version scheduler
-
-
-#ifndef CS333_P4
 #ifdef CS333_P3
 void
 scheduler(void)
@@ -908,7 +794,7 @@
   }
 }
 #endif //CS333_P2 version scheduler()
-#endif //CS333_P3/P2 versions
+
 // Enter scheduler.  Must hold only ptable.lock
 // and have changed proc->state. Saves and restores
 // intena because intena is a property of this
@@ -951,11 +837,7 @@
   }
   assertState(curproc, RUNNING, __FUNCTION__, __LINE__);
   curproc->state = RUNNABLE;
-#ifdef CS333_P4
-  stateListAdd(&ptable.ready[curproc->priority], curproc);
-#else
   stateListAdd(&ptable.list[RUNNABLE], curproc);
-#endif //CS333_P4
   sched();
   release(&ptable.lock);
 }
@@ -1087,11 +969,7 @@
       }
       assertState(p, SLEEPING, __FUNCTION__, __LINE__);
       p->state = RUNNABLE;
-#ifdef CS333_P4
-      stateListAdd(&ptable.ready[p->priority], p);
-#else
       stateListAdd(&ptable.list[RUNNABLE], p);
-#endif
     }
     p = temp;
   }
@@ -1127,29 +1005,28 @@
   struct proc *p;
 
   acquire(&ptable.lock);
-  p = findProc(pid);
-  if(p){
-    p->killed = 1;
-    if(p->state == SLEEPING){
-      if(stateListRemove(&ptable.list[SLEEPING], p) == -1){
-        panic("Unable to wake sleeping process!\n");
-      }
-      assertState(p, SLEEPING, __FUNCTION__, __LINE__);
-      p->state = RUNNABLE;
-#ifdef CS333_P4
-      stateListAdd(&ptable.ready[p->priority], p);
-#else
-      stateListAdd(&ptable.list[RUNNABLE], p);
-#endif //CS333_P4
+  for(int i = EMBRYO; i <= ZOMBIE; ++i){
+    p = ptable.list[i].head;
+    while(p){
+      if(p->pid == pid){
+        p->killed = 1;
+        if(i == SLEEPING){
+          if(stateListRemove(&ptable.list[SLEEPING], p) == -1){
+            panic("Unable to wake woken process!\n");
+          }
+          assertState(p, SLEEPING, __FUNCTION__, __LINE__);
+          p->state = RUNNABLE;
+          stateListAdd(&ptable.list[RUNNABLE], p);
+        }
+        release(&ptable.lock);
+        return 0;
       }
-    release(&ptable.lock);
-    return 0;
-   }
+      p = p->next;
+  }
+}
   release(&ptable.lock);
   return -1;
 }
-
-
 #endif //CS333_P3 version kill()
 // Kill the process with the given pid.
 // Process won't exit until it returns
@@ -1171,7 +1048,6 @@
       return 0;
     
   }
-  }
   release(&ptable.lock);
   return -1;
 }
@@ -1215,12 +1091,7 @@
     cprintf("\t");
   }
   cprintf("%d\t", p->gid);
-#ifdef CS333_P4
-  cprintf("%d\t%d\t%d.%d", ppid, p->priority, secs, frac_secs);
-#endif //CS333_P4
-#ifndef CS333_P4
   cprintf("%d\t%d.%d", ppid, secs, frac_secs);
-#endif //CS333_P3 version
   if(frac_secs < 10){
     cprintf("%s\t", "00");
   }
@@ -1571,6 +1442,10 @@
   for (int i=0; i<=MAXPRIO; i++) {
     p = ptable.ready[i].head;
     cprintf("Prio %d: ", i);
+    if(p->state != RUNNABLE) {
+      cprintf("\nlist invariant failed: process %d has state %s but is on ready list\n",
+          p->pid, states[p->state]);
+    }
     printReadyList(p, i);
   }
 }
@@ -1633,9 +1508,6 @@
       else{
         t_ptr->ppid = p->pid;
       }
-#ifdef CS333_P4
-      t_ptr->priority = p->priority;
-#endif //CS333_P4
       t_ptr->elapsed_ticks = ticks - p->start_ticks;
       t_ptr->CPU_total_ticks = p->cpu_ticks_total;
       safestrcpy(t_ptr->state, states[p->state], STRMAX);
@@ -1650,146 +1522,3 @@
 
 }
 #endif //CS333_P2
-#ifdef CS333_P4
-int
-getPriority(int pid)
-{
-  struct proc* p;
-  acquire(&ptable.lock);
-  for(int i = EMBRYO; i <=ZOMBIE; ++i){
-    p = ptable.list[i].head;
-    while(p){ //Search other states
-      if(p->pid == pid){
-        release(&ptable.lock);
-        return p->priority;
-      }
-      p = p->next;
-    }
-    int j = MAXPRIO; //Not found- search the priority queues
-    do {
-      p = ptable.ready[j].head; //Point p at head of ready list
-      while(p){ //Iterate p through the ready list
-        if(p->pid == pid){
-          release(&ptable.lock);
-          return p->priority; //Found process- exit function
-        }
-        p = p->next; //Check next process in this ready list
-      }
-      --j; //Decrement down to next lower priority
-    }while(j >= 0); //Loop terminates when i drops below 0 index
-
-  }
-  release(&ptable.lock);
-  return -1; //PID not found or PID in UNUSED list
-}
-
-int
-setPriority(int pid, int priority)
-{
-  struct proc* p;
-  acquire(&ptable.lock);
-  for(int i = SLEEPING; i <= RUNNING; ++i){ //Search the other lists
-    p = ptable.list[i].head;
-    while(p){
-      if(p->pid == pid){
-        p->priority = priority;
-        release(&ptable.lock);
-        return priority;
-      }
-      p = p->next;
-    }
-  }
-  int j = MAXPRIO; //Check through ready lists
-  do {
-    p = ptable.ready[j].head;  //Point p at head of ready list
-    while(p){ //Iterate through current ready list
-      if(p->pid == pid){ //PID found- set priority and exit
-        p->priority = priority;
-        release(&ptable.lock);
-        return priority;
-      }
-      p = p->next; //PID not found, next proc in the list
-    }
-    --j; //Decrement j to next lower priority
-  }while(j >= 0);
-  release(&ptable.lock);
-  return -1; //PID not found in a ready state
-}
-#endif //CS333_P4
-#ifdef CS333_P3
-//Find a process given the pid
-//Calling process MUST hold ptable lock
-//Return NULL if PID is invalid or if process is not found.
-//Otherwise return pointer to process
-struct proc*
-findProc(int pid){
-  if(pid < 0 || pid > NPROC){
-    return NULL;
-  }
-  struct proc* p;
-  for(int i = EMBRYO; i <= ZOMBIE; ++i){
-    p = ptable.list[i].head;
-    while(p){
-      if(p->pid == pid){
-        return p;
-      }
-      p = p->next;
-    }
-  }
-#ifdef CS333_P4
-  for(int j = 0; j <= MAXPRIO; ++j){
-    p = ptable.ready[j].head;
-    while(p){
-      if(p->pid == pid){
-        return p;
-      }
-      p = p->next;
-    }
-  }
-#endif //CS333_P4
-  return NULL;
-}
-#endif //CS333_P3
-#ifdef CS333_P4
-//Promote a process
-//Accepts pointer to proc struct
-//Checks priority
-//If priority < MAXPRIO-1, increment and reset budget
-//else, reset budget
-//ptable lock held by calling process
-
-void
-promoteProc(struct proc* p){
-  if(!p)
-    panic("Attempt to promote null ptr!\n");
-  p->budget = DEFAULT_BUDGET;
-  if(MAXPRIO > 0 && p->priority < (MAXPRIO - 1)){
-    p->priority++;
-  }
-  if(p->priority < 0 || p->priority > (MAXPRIO - 1))
-    panic("Process promoted out of bounds!\n");
-  return;
-}
-
-//Demote a process
-//Accepts pointer to proc struct
-//If priority > 0, decrement
-//Reset budget
-//ptable lock must be held by calling process
-
-void 
-demoteProc(struct proc* p){
-  if(!p)
-    panic("Attempt to demote null process!\n");
-  if(p->budget <= 0){
-    p->budget = DEFAULT_BUDGET;
-    if(MAXPRIO > 0 && p->priority > 0){
-      p->priority--;
-    }
-  }
-  if(p->priority < 0 || p->priority > (MAXPRIO - 1)){
-    panic("Process demoted out of bounds!\n");
-  }
-  return;
-}
-#endif //CS333_P4
